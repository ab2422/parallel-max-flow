Command:        mpirun -np 9 -x UCX_LOG_LEVEL=error ./main network/genrmf/hundred-thousand
Resources:      9 nodes (36 physical, 36 logical cores per node)
Memory:         187 GiB per node
Tasks:          9 processes
Machine:        gl3061.arc-ts.umich.edu
Start time:     Sun Jan 19 2020 18:55:34 (UTC-05)
Total time:     4 seconds
Full path:      /home/annabro/parallel-max-flow

Summary: main is Compute-bound in this configuration
Compute:                                     85.8% |========|
MPI:                                         10.5% ||
I/O:                                          3.7% ||
This application run was Compute-bound. A breakdown of this time and advice for investigating further is in the CPU section below. 
As very little time is spent in MPI calls, this code may also benefit from running at larger scales.

CPU:
A breakdown of the 85.8% CPU time:
Scalar numeric ops:                           4.5% ||
Vector numeric ops:                           0.0% |
Memory accesses:                             95.4% |=========|
The per-core performance is memory-bound. Use a profiler to identify time-consuming loops and check their cache performance.
No time is spent in vectorized instructions. Check the compiler's vectorization advice to see why key loops could not be vectorized.

MPI:
A breakdown of the 10.5% MPI time:
Time in collective calls:                    17.8% |=|
Time in point-to-point calls:                82.2% |=======|
Effective process collective rate:            5.77 kB/s
Effective process point-to-point rate:         133 kB/s
Most of the time is spent in point-to-point calls with a very low transfer rate. This suggests load imbalance is causing synchronization overhead; use an MPI profiler to investigate.

I/O:
A breakdown of the 3.7% I/O time:
Time in reads:                               98.4% |=========|
Time in writes:                               1.6% ||
Effective process read rate:                   103 MB/s
Effective process write rate:                  244 kB/s
Most of the time is spent in read operations with an average effective transfer rate. It may be possible to achieve faster effective transfer rates using asynchronous file operations.

Threads:
A breakdown of how multiple threads were used:
Computation:                                100.0% |=========|
Synchronization:                              0.0% |
Physical core utilization:                    2.6% ||
System load:                                 76.5% |=======|
Physical core utilization is low. Try increasing the number of threads or processes to improve performance.

Memory:
Per-process memory usage may also affect scaling:
Mean process memory usage:                     339 MiB
Peak process memory usage:                     552 MiB
Peak node memory usage:                      24.0% |=|
There is significant variation between peak and mean memory usage. This may be a sign of workload imbalance or a memory leak.
The peak node memory usage is very low. Running with fewer MPI processes and more data on each process may be more efficient.

Energy:
A breakdown of how the 3.14 Wh was used:
CPU:                                        100.0% |=========|
System:                                   not supported
Mean node power:                          not supported
Peak node power:                              0.00 W
The whole system energy has been calculated using the CPU energy usage.
System power metrics: No Arm IPMI Energy Agent config file found in /var/spool/ipmi-energy-agent. Did you start the Arm IPMI Energy Agent?

