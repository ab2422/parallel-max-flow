Here is an annotated, abbreviated, directory structure for the 
directory ~ftp/pub/netflow, available on Internet node dimacs@rutgers.edu.   

In general, file names are omitted the list below: check the readme
files in each directory for further information.  With few
exceptions, all instances, instance generators, and problem solvers
are compatible with the DIMACS standard input/output format. 
Caveat: DIMACS does not ensure that these implementations are correct, but
we will pass along bug reports and fixes that we hear about. 

This directory listing was prepared in March 1993. 

benchmarks/   	{ Instances and codes for comparison across architectures }
     	      	{   and compilers.} 
biblio/ 	{ Bibliographies and pointers to literature.}
directory.notes {This file (old name) } 
general-info/	{ DIMACS documents describing Challenge, standard} 
                {   input formats, benchmark experiments, etc. }
generators/     { Instance generators.}
instances/	{ Instances from real problems.} 
matching/	{ Solvers for matching problems.} 
maxflow/ 	{ Solvers for maxflow problems.}
mincost/	{ Solvers for mincost flow problems.} 
program_tools/  { Awk programs, tools, C procedures and packages to }
		{   support program development.} 
readme          { This file } 
recursive.ls	{ A regularly-updated recursive ls of directory.} 
submit/		{ Publically-writable directory for submissions. }
		{   If you submit something, send a note to }
		{   netflow@dimacs.rutgers.edu. } 
tar.notes 	{ Instructions for obtaining this directory as a tar file}

-----------
benchmarks:  
c/           	{ Files for testing C compilers (unix/notunix).} 
fortran/	{ Files for testing Fortraon compilers (unix/notunix).}

-----------
generators/matching: 
		 { Contains many generators in .edge and .geom format, }
  		 { plus Awk files for converting formats.  } 

generators/net-simple:
                  {Network generators too simple to be interesting; use only } 
                  { to test format compatibility. } 

generators/network:
                { Many generator codes in .min, .max, and .asn format,     }
		{    plus Awk files for converting from one problem        }
		{    format to another (e.g. assignment to min-cost flow). } 
capt/		{ CAPT generator by Bland and Jensen (min-cost flow). } 
ccd/            { Generates all the early DIMACS test files,     }
                { now slightly obsolete. } 
genrmf/		{ RMFGEN generator by Goldfarb and Grigoriadis, implemented }  
		{    by T. Badics (max flow). } 
grid-on-torus/  { Grid-on-torus generator by A. Goldberg (min-cost flow). }
gridgen/        { Grig generator by Y. Lee and J. Orlin.                  } 
gridgraph/      { Grid-network generator by M. G. C. Resende.             } 
mesh/	        { Mesh generator by A. Goldberg (min-cost circulation).   } 
netgen/		{ NETGEN.  The Fortran version and a C version.           } 
waissi/         { Many max-flow generators by G. Waissi. Also Turbo Pascal.} 
washington/     { Several max-flow generators by students of R. Anderson . } 

----------
instances:      
matching/       { Real-world instances for matching problems. }
mincost/	{ Real instances for mincost-flow problems.  } 

--------
matching/cardinality:
solver-1/	{  Gabows n^3 algorithm, implemented by E. Rothberg.} 
solver-2/	{  Micali-Vazirani, by S. Crocker. } 
solver-3/       {  Micali-Vazirano, by B. Mattingly and N. Ritchey  }

matching/weighted:
solver-1/	{ Gabows n^3 algorithm, implemented by E. Rothberg. } 

--------
maxflow:   	{  Solvers for maximum flow problems. } 
solver-1/	{  Goldberg's '86 agorithm, by E. Rothberg.} 
solver-2/	{  By G.  Waissi } 
solver-3/	{  3 solvers (Goldberg1, Goldberg2, and Dinic) by  }
		{  R. Anderson and J. Setubal. } 
solver-4/	{  The PLED algorithm by T. Badics} 
solver-5/	{  The GOLD algorithm by T. Badics} 

--------
mincost:	{ Solvers for minimum-cost flow problems.}
solver-1/  	{  Netflo by Helgason and Kennington. } 

--------------
program_tools:
dynamic_trees/   { C package for implementing Dynamic Trees, by T. Badics. } 
universal.c      { Bentley's RNG which is robust across architectures. } 
