An annotated directory structure for the directory /pub/netflow,
available on Internet node dimacs@rutgers.edu.   

In general, file names are omitted the list below: check the readme
and index files in each directory for further information.  With few
exceptions, all instances, instance generators, and problem solvers
are compatible with the DIMACS standard input/output format. 
Caveat: DIMACS does not ensure that these implementations are correct. 

This directory listing was prepared in December 1991.

benchmarks/   	{ Instances and codes for comparison across architectures }
     	      	{   and compilers.} 
biblio/ 	{ Bibliographies and pointers to literature.}
general-info/	{ DIMACS documents describing Challenge, standard} 
                {   input formats, benchmark experiments, etc. }
generators/     { Instance generators.}
index 		{ A regularly-updated ls of directory contents.} 
instances/	{ Instances from real problems.} 
matching/	{ Solvers for matching problems.} 
maxflow/ 	{ Solvers for maxflow problems.}
mincost/	{ Solvers for mincost flow problems.} 
program_tools/  { Awk programs, tools, C procedures and packages to }
		{   support program development.} 
recursive.ls	{ A regularly-updated recursive ls of directory.} 
submit/		{ Publically-writable directory for submissions. }
		{   If you submit something, send a note to }
		{   netflow@dimacs.rutgers.edu. } 
tar.notes 	{ Instructions for obtaining the directory as a tar file}

benchmarks:  
c/           	{ Files for testing C compilers (unix/notunix).} 
fortran/	{ Files for testing Fortraon compilers (unix/notunix).}

generators:
matching/	 { Generators of instances for matching problems in }
		 {   DIMACS .edge and .geom formats. } 
net-simple/      { Generators of very simple network instances---use }
		 {   to test input format compatiblity only.         }
network/	 { Generators of instances for network problems.     } 
universal.c      { Bentley's random-number which is very robust      }
		 {    across architectures. } 
	
generators/matching: 
		 { Contains many generators in .edge and .geom format, }
  		 { plus Awk files for converting formats.  } 
fractals/        { A generator of fractal point sets. } 

generators/network:
                { Many generator codes in .min, .max, and .asn format,     }
		{    plus Awk files for converting from one problem        }
		{    format to another (e.g. assignment to min-cost flow). } 
capt/		{ CAPT generator by Bland and Jensen (min-cost flow). } 
genrmf/		{ RMFGEN generator by Goldfarb and Grigoriadis, implemented }  
		{    by T. Badics (max flow). } 
grid-on-torus/  { Grid-on-torus generator by A. Goldberg (min-cost flow). }
gridgraph/      { Grid-network generator by M. G. C. Resende.             } 
mesh/	        { Mesh generator by A. Goldberg (min-cost circulation).   } 
netgen/		{ NETGEN.  The Fortran version and a C version.           } 
waissi/         { Many max-flow generators by G. Waissi. Also Turbo Pascal.} 
washington/     { Several max-flow generators by students of R. Anderson . } 

instances:      
matching/       { Real-world instances for matching problems. }
mincost/	{ Real instances for mincost-flow problems.  } 

matching:
cardinality/    { Solvers for cardinality matching. } 
weighted/	{ Solvers for weighted matching. } 

matching/cardinality:
solver-1/	{  Gabows n^3 algorithm, implemented by E. Rothberg.} 
solver-2/	{  Micali-Vazirani, by S. Crocker. } 

matching/weighted:
solver-1/	{ Gabows n^3 algorithm, implemented by E. Rothberg. } 

maxflow:   	{  Solvers for maximum flow problems. } 
solver-1/	{  Goldberg's '86 agorithm, by E. Rothberg.} 
solver-2/	{  By G.  Waissi } 
solver-3/	{  3 solvers (Goldberg1, Goldberg2, and Dinic) by  }
		{  R. Anderson and J. Setubal. } 

mincost:	{ Solvers for minimum-cost flow problems.}
solver-1/  	{  Netflo by Helgason and Kennington. } 

program_tools:
dynamic_trees/   { C package for implementing Dynamic Trees, by T. Badics. } 
universal.c      { Bentley's random number generator which is robust across }
		 { architectures. } 
