This file contains a list of suggested projects for the DIMACS
Implementation Challenge.  

	--Implement an algorithm with interesting theoretical 
properties that has not been previously implemented.  While running 
times are useful,  experiments which report performance in terms of 
combinatorial measures (by counting significant operations) are of 
particular interest for comparison across environments. 

	--Linear programming can be applied to any of the network
flow problems.  Compare the interior point method to network simplex
approaches (and to combinatorial algorithms).

	--Although scaling techniques are useful in improving theoretical
bounds, it is not clear whether scaling is helpful in speeding up 
implementations of these algorithms.  Evaluate the sensitivity of 
scaling algorithms.

	--Goldberg, Tardos, and Tarjan (Network Flow Algorithms,
March 1989,  Tech. Rep. CSS-TR-216-89, Dept. of Computer Science, 
Princeton University) describe a generaic push-relabel algorithm for 
the maximum flow problem.  Two implementation issues arise:  the order
of selection of active vertices, and the choice of data structure for
maintaining arc information.  Discover which choices are best for 
various input classes. 

	--Many well-known optimization problems are specializations of
minimum-cost flow or maximum flow.  Design instance generators based
upon applications and evaluate the general algorithms for these inputs.

	--Compare specialized algorithms to general algorithms for 
certain problems.  For example, is there a maximum flow algorithm 
specialized for bipartitie instances which is more efficient than 
general algorithms running on bipartite instances?

	--Implement and evaluate some flow algorithms for parallel
architectures.  What kind of speedup is achieved, in running time
and in basic operations?  Where are the bottlenecks? 

	--What is the fastest implementation of the X-algorithm? 
Is the efficiency robust across computing environments?  Is the
efficiency robust across input classes?  For X, substitute: Dinic's 
algorithm for maximum flows,  network simplex for maximum flows, 
network simplex or dual simplex for assignment, or your favorite 
contender.  

	--It appears difficult to develop an implementation for the
matching problem which is clearly correct for all inputs. Design an
input generator that ``stresses'' matching programs by presenting, 
say, inputs that cause the appearance of blossoms with multiple
nesting.

	
	--Vaidya (20th STOC 1988, pp 422-425) suggests algorithms for 
assignment and matching which are theoretically more efficient on 
geometric networks and graphs than algorithms for general costs.  Compare
these algorithms to one or more general algorithms on geometric graphs
for several metrics. 

